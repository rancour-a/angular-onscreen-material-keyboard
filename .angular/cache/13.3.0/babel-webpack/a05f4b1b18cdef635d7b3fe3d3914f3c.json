{"ast":null,"code":"import { ElementRef, EventEmitter, LOCALE_ID } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { MatKeyboardService } from '../services/keyboard.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/keyboard.service\";\nimport * as i2 from \"@angular/forms\";\nexport let MatKeyboardDirective = /*#__PURE__*/(() => {\n  class MatKeyboardDirective {\n    constructor(_elementRef, _keyboardService, _defaultLocale, _control) {\n      this._elementRef = _elementRef;\n      this._keyboardService = _keyboardService;\n      this._defaultLocale = _defaultLocale;\n      this._control = _control;\n      this.active = true;\n      this.anchor = 'bottom';\n      this.enterClick = new EventEmitter();\n      this.capsClick = new EventEmitter();\n      this.altClick = new EventEmitter();\n      this.shiftClick = new EventEmitter();\n    }\n\n    ngOnDestroy() {\n      this.hideKeyboard();\n    }\n\n    showKeyboard() {\n      if (!this.active) {\n        return;\n      }\n\n      this._keyboardRef = this._keyboardService.open(this.matKeyboard, {\n        darkTheme: this.darkTheme,\n        duration: this.duration,\n        isDebug: this.isDebug\n      }, this.anchor); // reference the input element\n\n      this._keyboardRef.instance.setInputInstance(this._elementRef); // set control if given, cast to smth. non-abstract\n\n\n      if (this._control) {\n        this._keyboardRef.instance.attachControl(this._control.control);\n      } // connect outputs\n\n\n      this._keyboardRef.instance.enterClick.subscribe(() => this.enterClick.next());\n\n      this._keyboardRef.instance.capsClick.subscribe(() => this.capsClick.next());\n\n      this._keyboardRef.instance.altClick.subscribe(() => this.altClick.next());\n\n      this._keyboardRef.instance.shiftClick.subscribe(() => this.shiftClick.next());\n    }\n\n    hideKeyboard() {\n      if (this._keyboardRef) {\n        this._keyboardRef.dismiss();\n      }\n    }\n\n  }\n\n  MatKeyboardDirective.ɵfac = function MatKeyboardDirective_Factory(t) {\n    return new (t || MatKeyboardDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MatKeyboardService), i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n  };\n\n  MatKeyboardDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: MatKeyboardDirective,\n    selectors: [[\"input\", \"matKeyboard\", \"\"], [\"textarea\", \"matKeyboard\", \"\"]],\n    hostBindings: function MatKeyboardDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatKeyboardDirective_focus_HostBindingHandler($event) {\n          return ctx.showKeyboard($event);\n        })(\"blur\", function MatKeyboardDirective_blur_HostBindingHandler($event) {\n          return ctx.hideKeyboard($event);\n        });\n      }\n    },\n    inputs: {\n      matKeyboard: \"matKeyboard\",\n      active: \"active\",\n      anchor: \"anchor\",\n      darkTheme: \"darkTheme\",\n      duration: \"duration\",\n      isDebug: \"isDebug\"\n    },\n    outputs: {\n      enterClick: \"enterClick\",\n      capsClick: \"capsClick\",\n      altClick: \"altClick\",\n      shiftClick: \"shiftClick\"\n    }\n  });\n  return MatKeyboardDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}