{"ast":null,"code":"import { Subject } from 'rxjs';\n/**\r\n * Reference to a keyboard dispatched from the keyboard service.\r\n */\n\nexport class MatKeyboardRef {\n  constructor(instance, containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the keyboard has closed. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the keyboard has opened and appeared. */\n\n    this._afterOpened = new Subject(); // Sets the readonly instance of the keyboard content component.\n\n    this.instance = instance;\n    this.containerInstance = containerInstance; // Finish dismiss on exitting\n\n    containerInstance.onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the keyboard. */\n\n\n  dismiss() {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n  /** Marks the keyboard as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Gets an observable that is notified when the keyboard is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterClosed.asObservable();\n  }\n  /** Gets an observable that is notified when the keyboard has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance.onEnter;\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    this._afterClosed.next();\n\n    this._afterClosed.complete();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}