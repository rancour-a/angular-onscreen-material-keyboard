{"ast":null,"code":"import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, ComponentRef, EmbeddedViewRef, NgZone } from '@angular/core';\nimport { AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { KeyboardAnimationState } from '../../enums/keyboard-animation-state.enum';\nimport { KeyboardAnimationTransition } from '../../enums/keyboard-animation-transition.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/portal\";\n\nfunction MatKeyboardContainerComponent_ng_template_0_Template(rf, ctx) {} // TODO: we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\n\n\nexport const SHOW_ANIMATION = `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\nexport const HIDE_ANIMATION = `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n/**\r\n * Internal component that wraps user-provided keyboard content.\r\n * @docs-private\r\n */\n\nexport let MatKeyboardContainerComponent = /*#__PURE__*/(() => {\n  class MatKeyboardContainerComponent extends BasePortalOutlet {\n    constructor(_ngZone, _changeDetectorRef) {\n      super();\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Whether the component has been destroyed. */\n\n      this._destroyed = false;\n      /** The state of the keyboard animations. */\n\n      this._animationState = KeyboardAnimationState.Void;\n      /** Subject for notifying that the keyboard has exited from view. */\n\n      this.onExit = new Subject();\n      /** Subject for notifying that the keyboard has finished entering the view. */\n\n      this.onEnter = new Subject();\n      this.attrRole = 'alert';\n    }\n\n    onMousedown(event) {\n      event.preventDefault();\n    }\n    /** Attach a component portal as content to this keyboard container. */\n\n\n    attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throw Error('Attempting to attach keyboard content after content is already attached');\n      }\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    } // Attach a template portal as content to this keyboard container\n\n\n    attachTemplatePortal() {\n      throw Error('Not yet implemented');\n    }\n    /** Handle end of animations, updating the state of the keyboard. */\n\n\n    onAnimationEnd(event) {\n      const {\n        fromState,\n        toState\n      } = event;\n\n      if (toState === KeyboardAnimationState.Void && fromState !== KeyboardAnimationState.Void || toState.startsWith('hidden')) {\n        this._completeExit();\n      }\n\n      if (toState === KeyboardAnimationState.Visible) {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        const onEnter = this.onEnter;\n\n        this._ngZone.run(() => {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of keyboard entrance into view. */\n\n\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = KeyboardAnimationState.Visible;\n\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n\n\n    exit() {\n      this._animationState = KeyboardAnimationState.Hidden;\n      return this.onExit;\n    }\n    /**\r\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\r\n     */\n\n\n    ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\r\n     * Waits for the zone to settle before removing the element. Helps prevent\r\n     * errors where we end up removing an element which is in the middle of an animation.\r\n     */\n\n\n    _completeExit() {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(first()).subscribe(() => {\n        this.onExit.next();\n        this.onExit.complete();\n      });\n    }\n\n  }\n\n  MatKeyboardContainerComponent.ɵfac = function MatKeyboardContainerComponent_Factory(t) {\n    return new (t || MatKeyboardContainerComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  MatKeyboardContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatKeyboardContainerComponent,\n    selectors: [[\"mat-keyboard-container\"]],\n    viewQuery: function MatKeyboardContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function MatKeyboardContainerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@state.done\", function MatKeyboardContainerComponent_animation_state_done_HostBindingHandler($event) {\n          return ctx.onAnimationEnd($event);\n        });\n        i0.ɵɵlistener(\"mousedown\", function MatKeyboardContainerComponent_mousedown_HostBindingHandler($event) {\n          return ctx.onMousedown($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", ctx.attrRole);\n        i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalHost\", \"\"]],\n    template: function MatKeyboardContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MatKeyboardContainerComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [i1.PortalHostDirective],\n    styles: [\"[_nghost-%COMP%]{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;border-radius:2px;box-sizing:border-box;display:block;margin:0 auto;max-width:960px;min-width:568px;transform:translateY(100%)}.cdk-high-contrast-active   [_nghost-%COMP%]{border:solid 1px}.cdk-high-contrast-active   [_nghost-%COMP%]   -shadowcsshost{border:solid 1px}\"],\n    data: {\n      animation: [trigger('state', [state(`${KeyboardAnimationState.Visible}`, style({\n        transform: 'translateY(0%)'\n      })), transition(`${KeyboardAnimationTransition.Hide}`, animate(HIDE_ANIMATION)), transition(`${KeyboardAnimationTransition.Show}`, animate(SHOW_ANIMATION))])]\n    },\n    changeDetection: 0\n  });\n  return MatKeyboardContainerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}