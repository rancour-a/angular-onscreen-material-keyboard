{"ast":null,"code":"import { ElementRef, EventEmitter, LOCALE_ID, QueryList } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { KEYBOARD_ICONS } from '../../configs/keyboard-icons.config';\nimport { KeyboardClassKey } from '../../enums/keyboard-class-key.enum';\nimport { KeyboardModifier } from '../../enums/keyboard-modifier.enum';\nimport { MatKeyboardService } from '../../services/keyboard.service';\nimport { MatKeyboardKeyComponent } from '../keyboard-key/keyboard-key.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/keyboard.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../keyboard-key/keyboard-key.component\";\n\nfunction MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-keyboard-key\", 6);\n    i0.ɵɵlistener(\"enterClick\", function MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template_mat_keyboard_key_enterClick_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(3);\n      return ctx_r5.onEnterClick();\n    })(\"capsClick\", function MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template_mat_keyboard_key_capsClick_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(3);\n      return ctx_r7.onCapsClick();\n    })(\"altClick\", function MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template_mat_keyboard_key_altClick_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(3);\n      return ctx_r8.onAltClick();\n    })(\"shiftClick\", function MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template_mat_keyboard_key_shiftClick_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r9 = i0.ɵɵnextContext(3);\n      return ctx_r9.onShiftClick();\n    })(\"keyClick\", function MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template_mat_keyboard_key_keyClick_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r10 = i0.ɵɵnextContext(3);\n      return ctx_r10.onKeyClick();\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const key_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"key\", ctx_r4.getModifiedKey(key_r3))(\"icon\", ctx_r4.getKeyIcon(key_r3))(\"active\", ctx_r4.isActive(key_r3))(\"input\", i0.ɵɵpipeBind1(1, 5, ctx_r4.inputInstance))(\"control\", ctx_r4.control);\n  }\n}\n\nfunction MatKeyboardComponent_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, MatKeyboardComponent_div_4_ng_container_1_mat_keyboard_key_1_Template, 2, 7, \"mat-keyboard-key\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const key_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getModifiedKey(key_r3));\n  }\n}\n\nfunction MatKeyboardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, MatKeyboardComponent_div_4_ng_container_1_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n/**\r\n * A component used to open as the default keyboard, matching material spec.\r\n * This should only be used internally by the keyboard service.\r\n */\n\n\nexport let MatKeyboardComponent = /*#__PURE__*/(() => {\n  class MatKeyboardComponent {\n    // inject dependencies\n    constructor(_locale, _keyboardService) {\n      this._locale = _locale;\n      this._keyboardService = _keyboardService;\n      this._darkTheme = new BehaviorSubject(false);\n      this._isDebug = new BehaviorSubject(false);\n      this._inputInstance$ = new BehaviorSubject(null);\n      this._modifier = KeyboardModifier.None;\n      this._capsLocked = false;\n      this._icons = KEYBOARD_ICONS;\n      this.cssClass = true;\n      this.enterClick = new EventEmitter();\n      this.capsClick = new EventEmitter();\n      this.altClick = new EventEmitter();\n      this.shiftClick = new EventEmitter();\n    } // returns an observable of the input instance\n\n\n    get inputInstance() {\n      return this._inputInstance$.asObservable();\n    }\n\n    set icons(icons) {\n      Object.assign(this._icons, icons);\n    }\n\n    set darkTheme(darkTheme) {\n      if (this._darkTheme.getValue() !== darkTheme) {\n        this._darkTheme.next(darkTheme);\n      }\n    }\n\n    set isDebug(isDebug) {\n      if (this._isDebug.getValue() !== isDebug) {\n        this._isDebug.next(isDebug);\n      }\n    }\n\n    get darkTheme$() {\n      return this._darkTheme.asObservable();\n    }\n\n    get isDebug$() {\n      return this._isDebug.asObservable();\n    }\n\n    setInputInstance(inputInstance) {\n      this._inputInstance$.next(inputInstance);\n    }\n\n    attachControl(control) {\n      this.control = control;\n    }\n\n    ngOnInit() {\n      // set a fallback using the locale\n      if (!this.layout) {\n        this.locale = this._keyboardService.mapLocale(this._locale) ? this._locale : 'en-US';\n        this.layout = this._keyboardService.getLayoutForLocale(this.locale);\n      }\n    }\n    /**\r\n     * dismisses the keyboard\r\n     */\n\n\n    dismiss() {\n      this.keyboardRef.dismiss();\n    }\n    /**\r\n     * checks if a given key is currently pressed\r\n     * @param key\r\n     * @param\r\n     */\n\n\n    isActive(key) {\n      const modifiedKey = this.getModifiedKey(key);\n      const isActiveCapsLock = modifiedKey === KeyboardClassKey.Caps && this._capsLocked;\n      const isActiveModifier = modifiedKey === KeyboardModifier[this._modifier];\n      return isActiveCapsLock || isActiveModifier;\n    } // retrieves modified key\n\n\n    getModifiedKey(key) {\n      let modifier = this._modifier; // `CapsLock` inverts the meaning of `Shift`\n\n      if (this._capsLocked) {\n        modifier = this._invertShiftModifier(this._modifier);\n      }\n\n      return key[modifier];\n    } // retrieves icon for given key\n\n\n    getKeyIcon(key) {\n      return this._icons[key[KeyboardModifier.None]];\n    }\n    /**\r\n     * listens to users keyboard inputs to simulate on virtual keyboard, too\r\n     * @param event\r\n     */\n\n\n    onKeyDown(event) {\n      // 'activate' corresponding key\n      this._keys.filter(key => key.key === event.key).forEach(key => {\n        key.pressed = true;\n      }); // simulate modifier press\n\n\n      if (event.key === KeyboardClassKey.Caps) {\n        this.onCapsClick(event.getModifierState(KeyboardClassKey.Caps));\n      }\n\n      if (event.key === KeyboardClassKey.Alt && this._modifier !== KeyboardModifier.Alt && this._modifier !== KeyboardModifier.ShiftAlt) {\n        this.onAltClick();\n      }\n\n      if (event.key === KeyboardClassKey.Shift && this._modifier !== KeyboardModifier.Shift && this._modifier !== KeyboardModifier.ShiftAlt) {\n        this.onShiftClick();\n      }\n    }\n    /**\r\n     * listens to users keyboard inputs to simulate on virtual keyboard, too\r\n     * @param event\r\n     */\n\n\n    onKeyUp(event) {\n      // 'deactivate' corresponding key\n      this._keys.filter(key => key.key === event.key).forEach(key => {\n        key.pressed = false;\n      }); // simulate modifier release\n\n\n      if (event.key === KeyboardClassKey.Alt && (this._modifier === KeyboardModifier.Alt || this._modifier === KeyboardModifier.ShiftAlt)) {\n        this.onAltClick();\n      }\n\n      if (event.key === KeyboardClassKey.Shift && (this._modifier === KeyboardModifier.Shift || this._modifier === KeyboardModifier.ShiftAlt)) {\n        this.onShiftClick();\n      }\n    }\n    /**\r\n     * bubbles event if submit is potentially triggered\r\n     */\n\n\n    onEnterClick() {\n      // notify subscribers\n      this.enterClick.next();\n    }\n    /**\r\n     * simulates clicking `CapsLock` key\r\n     * @param targetState\r\n     */\n\n\n    onCapsClick(targetState = !this._capsLocked) {\n      // not implemented\n      this._capsLocked = targetState; // notify subscribers\n\n      this.capsClick.next();\n    }\n    /*\r\n     * non-modifier keys are clicked\r\n     */\n\n\n    onKeyClick() {\n      if (this._modifier === KeyboardModifier.Shift || this._modifier === KeyboardModifier.ShiftAlt) {\n        this._modifier = this._invertShiftModifier(this._modifier);\n      }\n\n      if (this._modifier === KeyboardModifier.Alt || this._modifier === KeyboardModifier.ShiftAlt) {\n        this._modifier = this._invertAltModifier(this._modifier);\n      }\n    }\n    /**\r\n     * simulates clicking `Alt` key\r\n     */\n\n\n    onAltClick() {\n      // invert modifier meaning\n      this._modifier = this._invertAltModifier(this._modifier); // notify subscribers\n\n      this.altClick.next();\n    }\n    /**\r\n     * simulates clicking `Shift` key\r\n     */\n\n\n    onShiftClick() {\n      // invert modifier meaning\n      this._modifier = this._invertShiftModifier(this._modifier); // notify subscribers\n\n      this.shiftClick.next();\n    }\n\n    _invertAltModifier(modifier) {\n      switch (modifier) {\n        case KeyboardModifier.None:\n          return KeyboardModifier.Alt;\n\n        case KeyboardModifier.Shift:\n          return KeyboardModifier.ShiftAlt;\n\n        case KeyboardModifier.ShiftAlt:\n          return KeyboardModifier.Shift;\n\n        case KeyboardModifier.Alt:\n          return KeyboardModifier.None;\n      }\n    }\n\n    _invertShiftModifier(modifier) {\n      switch (modifier) {\n        case KeyboardModifier.None:\n          return KeyboardModifier.Shift;\n\n        case KeyboardModifier.Alt:\n          return KeyboardModifier.ShiftAlt;\n\n        case KeyboardModifier.ShiftAlt:\n          return KeyboardModifier.Alt;\n\n        case KeyboardModifier.Shift:\n          return KeyboardModifier.None;\n      }\n    }\n\n  }\n\n  MatKeyboardComponent.ɵfac = function MatKeyboardComponent_Factory(t) {\n    return new (t || MatKeyboardComponent)(i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i1.MatKeyboardService));\n  };\n\n  MatKeyboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatKeyboardComponent,\n    selectors: [[\"mat-keyboard\"]],\n    viewQuery: function MatKeyboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatKeyboardKeyComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._keys = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function MatKeyboardComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function MatKeyboardComponent_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        }, false, i0.ɵɵresolveDocument)(\"keyup\", function MatKeyboardComponent_keyup_HostBindingHandler($event) {\n          return ctx.onKeyUp($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-keyboard\", ctx.cssClass);\n      }\n    },\n    decls: 5,\n    vars: 9,\n    consts: [[1, \"mat-keyboard-wrapper\"], [1, \"mat-keyboard-layout\"], [\"class\", \"mat-keyboard-row\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-keyboard-row\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"mat-keyboard-col\", 3, \"key\", \"icon\", \"active\", \"input\", \"control\", \"enterClick\", \"capsClick\", \"altClick\", \"shiftClick\", \"keyClick\", 4, \"ngIf\"], [1, \"mat-keyboard-col\", 3, \"key\", \"icon\", \"active\", \"input\", \"control\", \"enterClick\", \"capsClick\", \"altClick\", \"shiftClick\", \"keyClick\"]],\n    template: function MatKeyboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelementStart(3, \"nav\", 1);\n        i0.ɵɵtemplate(4, MatKeyboardComponent_div_4_Template, 2, 1, \"div\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"dark-theme\", i0.ɵɵpipeBind1(1, 5, ctx.darkTheme$))(\"debug\", i0.ɵɵpipeBind1(2, 7, ctx.isDebug$));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.layout.keys);\n      }\n    },\n    directives: [i2.NgForOf, i2.NgIf, i3.MatKeyboardKeyComponent],\n    pipes: [i2.AsyncPipe],\n    styles: [\".mat-keyboard-wrapper[_ngcontent-%COMP%]{background-color:#f5f5f5;border-radius:2px;display:flex;font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;justify-content:space-between;line-height:20px;padding:14px 24px}.mat-keyboard-wrapper.dark-theme[_ngcontent-%COMP%]{background-color:#424242}.mat-keyboard-action[_ngcontent-%COMP%]{background:none;color:inherit;flex-shrink:0;font-family:inherit;font-size:inherit;font-weight:600;line-height:1;margin-left:8px;text-transform:uppercase}.dark-theme[_nghost-%COMP%]   .mat-keyboard-action[_ngcontent-%COMP%]{color:#f5f5f5}.mat-keyboard-layout[_ngcontent-%COMP%]{width:100%}.mat-keyboard-row[_ngcontent-%COMP%]{align-items:stretch;display:flex;flex-direction:row;flex-wrap:nowrap}.mat-keyboard-col[_ngcontent-%COMP%]{box-sizing:border-box;flex:1 1 auto;padding:4px}.mat-keyboard-key[_ngcontent-%COMP%]{min-width:0;width:100%}.dark-theme[_nghost-%COMP%]   .mat-keyboard-key[_ngcontent-%COMP%]{background-color:#616161;color:#f5f5f5}.debug[_nghost-%COMP%]   .mat-keyboard-key-deadkey[_ngcontent-%COMP%]{background-color:#5f9ea0}.debug[_nghost-%COMP%]   .mat-keyboard-key-modifier[_ngcontent-%COMP%]{background-color:#7fffd4}.debug.dark-theme[_nghost-%COMP%]   .mat-keyboard-key-deadkey[_ngcontent-%COMP%]{background-color:#639}.debug.dark-theme[_nghost-%COMP%]   .mat-keyboard-key-modifier[_ngcontent-%COMP%]{background-color:#9370db}\"],\n    changeDetection: 0\n  });\n  return MatKeyboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}